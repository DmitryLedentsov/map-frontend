{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport L, { latLng } from 'leaflet';\nimport { OpenStreetMapProvider } from \"leaflet-geosearch\";\nimport { email, image, required, size } from 'vee-validate/dist/rules';\nimport { extend, setInteractionMode, ValidationObserver, ValidationProvider } from 'vee-validate';\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nsetInteractionMode('eager');\nextend('required', {\n  ...required,\n  message: '{_field_} не может быть пустым'\n});\nextend('email', {\n  ...email,\n  message: 'Некорректный Email'\n});\nextend('image', {\n  ...image,\n  message: 'Файл не является изображением'\n});\nextend('size', {\n  ...size,\n  message: 'Размер изображения не должен превышать 2МБ'\n});\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver\n  },\n  name: 'MapComponent',\n  data: () => ({\n    zoom: 13,\n    center: latLng(process.env.VUE_APP_START_LAT, process.env.VUE_APP_START_LNG),\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    // attribution: 'Grabli',\n    withTooltip: latLng(process.env.VUE_APP_START_LAT, process.env.VUE_APP_START_LNG),\n    currentZoom: 11.5,\n    mapOptions: {\n      zoomSnap: 0.5\n    },\n    toggle_exclusive: 0,\n    types: [],\n    markers: [],\n    currentMarker: {\n      id: null,\n      type: {\n        // id: null,\n        name: \"\"\n        // tag: \"\"\n      },\n      coordinates: null,\n      title: \"\",\n      description: \"\",\n      creatorName: \"\",\n      creatorContact: \"\",\n      image: null\n    },\n    currentIndex: -1,\n    showForm: false,\n    showCard: false,\n    showMap: false,\n    geosearchOptions: {\n      provider: new OpenStreetMapProvider()\n    }\n  }),\n  created() {\n    this.getData();\n  },\n  methods: {\n    getData() {\n      this.$http.get('street-objects/types').then(response => {\n        if (response.status === 200) {\n          this.types = [...response.data];\n        }\n      }).catch(error => {\n        console.log(error.message);\n      });\n      this.$http.get('street-objects').then(response => {\n        if (response.status === 200) {\n          this.markers = [...response.data];\n          this.showMap = true;\n        }\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    mapClick(event) {\n      // this.resetCurrentMarker()\n\n      let type = this.types[this.toggle_exclusive];\n\n      // this.currentMarker.type = type\n      // this.currentMarker.coordinates = event.latlng\n      // this.markers.push(this.currentMarker)\n      let marker = {\n        coordinates: [event.latlng.lat, event.latlng.lng],\n        type: type\n      };\n      this.markers.push(marker);\n      this.currentMarker = marker;\n      this.showForm = true;\n    },\n    saveObject() {\n      this.closeForm();\n      const info = {\n        \"typeId\": this.currentMarker.type.id,\n        \"coordinates\": this.currentMarker.coordinates,\n        \"title\": this.currentMarker.title,\n        \"description\": this.currentMarker.description,\n        \"creatorName\": this.currentMarker.creatorName,\n        \"creatorContact\": this.currentMarker.creatorContact\n      };\n      const data = new FormData();\n      data.append(\"info\", this.convertToJsonFile(info));\n      data.append(\"image\", this.currentMarker.image);\n      this.$http.post('street-objects', data).then(response => {\n        const newMarker = this.markers.find(elem => !elem.id);\n        newMarker.id = response.data.id;\n        newMarker.image = response.data.image;\n        console.log(response.data.id);\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    convertToJsonFile(object) {\n      return new Blob([JSON.stringify(object)], {\n        type: 'application/json'\n      });\n    },\n    cancelCreation() {\n      this.closeForm();\n      this.removeCurrentMarker();\n    },\n    closeForm() {\n      this.$refs.observer.reset();\n      this.showForm = false;\n    },\n    removeCurrentMarker() {\n      let markerIndex = this.markers.indexOf(this.currentMarker);\n      if (markerIndex !== -1) {\n        this.markers.splice(markerIndex, 1);\n      }\n    },\n    zoomUpdate(zoom) {\n      this.currentZoom = zoom;\n    },\n    createIcon(tag, index) {\n      let name = index === this.currentIndex ? tag + \"_active\" : tag;\n      return L.icon({\n        iconUrl: this.getIcon(name),\n        iconSize: [25, 25],\n        iconAnchor: [12, 25]\n      });\n    },\n    getIcon(icon) {\n      return require(`../assets/icons/${icon}.png`);\n    },\n    centerUpdate(center) {\n      console.log(center);\n      // this.currentCenter = center\n    },\n    markerClick(index) {\n      this.currentIndex = index;\n      this.currentMarker = this.markers[index];\n      this.showCard = true;\n    }\n  }\n};","map":{"version":3,"names":["L","latLng","OpenStreetMapProvider","email","image","required","size","extend","setInteractionMode","ValidationObserver","ValidationProvider","Icon","Default","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","message","components","name","data","zoom","center","process","env","VUE_APP_START_LAT","VUE_APP_START_LNG","url","withTooltip","currentZoom","mapOptions","zoomSnap","toggle_exclusive","types","markers","currentMarker","id","type","coordinates","title","description","creatorName","creatorContact","currentIndex","showForm","showCard","showMap","geosearchOptions","provider","created","getData","methods","$http","get","then","response","status","catch","error","console","log","mapClick","event","marker","latlng","lat","lng","push","saveObject","closeForm","info","FormData","append","convertToJsonFile","post","newMarker","find","elem","object","Blob","JSON","stringify","cancelCreation","removeCurrentMarker","$refs","observer","reset","markerIndex","indexOf","splice","zoomUpdate","createIcon","tag","index","icon","getIcon","iconSize","iconAnchor","centerUpdate","markerClick"],"sources":["src/components/MapComponent.vue"],"sourcesContent":["<template>\n  <v-container fill-height>\n    <v-dialog v-model=\"showCard\" max-width=\"300\">\n      <v-card>\n\n        <v-img\n            :width=\"300\"\n            cover\n            :src=\"currentMarker.image\"\n        >\n        </v-img>\n\n        <v-card-title>\n          {{ currentMarker.title }}\n        </v-card-title>\n\n        <v-card-subtitle>\n          {{ currentMarker.type.name }}\n        </v-card-subtitle>\n\n        <v-card-text>\n          {{ currentMarker.description }}\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n\n    <v-dialog v-model=\"showForm\" max-width=\"350\" persistent>\n      <v-card>\n        <validation-observer ref=\"observer\" v-slot=\"{ invalid }\">\n          <v-card-title>\n            Создание объекта\n          </v-card-title>\n\n          <v-card-subtitle>\n            Чтобы добавить объект на карту, заполните следующую форму\n          </v-card-subtitle>\n\n          <v-card-text>\n            <validation-provider v-slot=\"{ errors }\" name=\"Заголовок\" rules=\"required\">\n              <v-text-field clearable\n                            v-model=\"currentMarker.title\"\n                            :error-messages=\"errors\"\n                            label=\"Заголовок\"\n                            required>\n              </v-text-field>\n            </validation-provider>\n          </v-card-text>\n\n          <v-card-text>\n            <validation-provider v-slot=\"{ errors }\" name=\"Описание\" rules=\"required\">\n              <v-textarea clearable\n                          clear-icon=\"mdi-close-circle\"\n                          auto-grow\n                          v-model=\"currentMarker.description\"\n                          :error-messages=\"errors\"\n                          label=\"Описание\"\n                          required>\n              </v-textarea>\n            </validation-provider>\n          </v-card-text>\n\n          <v-card-text>\n            <validation-provider v-slot=\"{ errors }\" name=\"ФИО\" rules=\"required\">\n              <v-text-field clearable\n                            v-model=\"currentMarker.creatorName\"\n                            :error-messages=\"errors\"\n                            label=\"ФИО\"\n                            required>\n              </v-text-field>\n            </validation-provider>\n          </v-card-text>\n\n          <v-card-text>\n            <validation-provider v-slot=\"{ errors }\" name=\"Email\" rules=\"required|email\">\n              <v-text-field clearable\n                            v-model=\"currentMarker.creatorContact\"\n                            :error-messages=\"errors\"\n                            label=\"Email\"\n                            required>\n              </v-text-field>\n            </validation-provider>\n          </v-card-text>\n\n          <v-card-text>\n            <validation-provider v-slot=\"{ errors }\" name=\"Изображение\" rules=\"required|image|size:2000\">\n              <v-file-input\n                  accept=\"image/png, image/jpeg\"\n                  placeholder=\"Выберите изображение\"\n                  prepend-icon=\"mdi-camera\"\n                  label=\"Изображение\"\n                  v-model=\"currentMarker.image\"\n                  :error-messages=\"errors\"\n              ></v-file-input>\n            </validation-provider>\n          </v-card-text>\n\n          <v-card-actions>\n            <v-btn\n                :disabled=\"invalid\"\n                color=\"green darken-1\"\n                text\n                @click=\"saveObject\"\n            >\n              ОК\n            </v-btn>\n            <v-btn\n                color=\"gray darken-1\"\n                text\n                @click=\"cancelCreation\"\n            >\n              Отмена\n            </v-btn>\n          </v-card-actions>\n        </validation-observer>\n      </v-card>\n    </v-dialog>\n\n    <v-progress-circular\n        indeterminate\n        color=\"primary\"\n        class=\"mx-auto\"\n        v-if=\"!showMap\"\n    ></v-progress-circular>\n\n    <l-map\n        style=\"z-index: 1;\"\n        v-if=\"showMap\"\n        :zoom=\"zoom\"\n        :center=\"center\"\n        :options=\"mapOptions\"\n        @update:zoom=\"zoomUpdate\"\n        @click=\"mapClick\"\n    >\n      <l-geosearch :options=\"geosearchOptions\"/>\n      <l-locatecontrol/>\n      <l-control>\n        <div style=\"max-height: 70vh; overflow-y: scroll;\">\n          <v-btn-toggle v-model=\"toggle_exclusive\" mandatory class=\"flex-column\">\n            <v-tooltip left v-for=\"type in types\" :key=\"type.tag\">\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn v-bind=\"attrs\" v-on=\"on\">\n                  <img height=\"20px\" width=\"20px\" :src=\"getIcon(type.tag)\" alt=\"Тип объекта\"/>\n                </v-btn>\n              </template>\n              <span>{{ type.name }}</span>\n            </v-tooltip>\n          </v-btn-toggle>\n        </div>\n      </l-control>\n      <l-tile-layer :url=\"url\" :attribution=\"attribution\"/>\n      <l-marker\n          v-for=\"(marker, index) in markers\"\n          :visible=\"currentZoom > 11\"\n          :lat-lng=\"marker.coordinates\"\n          :key=\"index\"\n          :icon=\"createIcon(marker.type.tag, index)\"\n          @click=\"markerClick(index)\">\n      </l-marker>\n    </l-map>\n  </v-container>\n</template>\n\n<style>\n@import \"~leaflet/dist/leaflet.css\";\n@import \"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\";\n@import \"https://unpkg.com/leaflet-geosearch@2.6.0/assets/css/leaflet.css\";\n\n.leaflet-control-attribution.leaflet-control {\n  display: none;\n}\n</style>\n\n<script>\nimport L, {latLng} from 'leaflet'\nimport {OpenStreetMapProvider} from \"leaflet-geosearch\"\nimport {email, image, required, size} from 'vee-validate/dist/rules'\nimport {extend, setInteractionMode, ValidationObserver, ValidationProvider} from 'vee-validate'\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n})\n\nsetInteractionMode('eager')\n\nextend('required', {\n  ...required,\n  message: '{_field_} не может быть пустым',\n})\n\nextend('email', {\n  ...email,\n  message: 'Некорректный Email',\n})\n\nextend('image', {\n  ...image,\n  message: 'Файл не является изображением',\n})\n\nextend('size', {\n  ...size,\n  message: 'Размер изображения не должен превышать 2МБ',\n})\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n  },\n\n  name: 'MapComponent',\n\n  data: () => ({\n    zoom: 13,\n    center: latLng(process.env.VUE_APP_START_LAT, process.env.VUE_APP_START_LNG),\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    // attribution: 'Grabli',\n    withTooltip: latLng(process.env.VUE_APP_START_LAT, process.env.VUE_APP_START_LNG),\n    currentZoom: 11.5,\n    mapOptions: {\n      zoomSnap: 0.5\n    },\n    toggle_exclusive: 0,\n\n    types: [],\n    markers: [],\n\n    currentMarker: {\n      id: null,\n      type: {\n        // id: null,\n        name: \"\"\n        // tag: \"\"\n      },\n      coordinates: null,\n      title: \"\",\n      description: \"\",\n      creatorName: \"\",\n      creatorContact: \"\",\n\n      image: null\n    },\n\n    currentIndex: -1,\n\n    showForm: false,\n    showCard: false,\n    showMap: false,\n\n    geosearchOptions: {\n      provider: new OpenStreetMapProvider()\n    }\n  }),\n  created() {\n    this.getData()\n  },\n  methods: {\n    getData() {\n      this.$http.get('street-objects/types').then(response => {\n        if (response.status === 200) {\n          this.types = [...response.data]\n        }\n      }).catch(error => {\n        console.log(error.message)\n      })\n\n      this.$http.get('street-objects').then(response => {\n        if (response.status === 200) {\n          this.markers = [...response.data]\n          this.showMap = true\n        }\n      }).catch(error => {\n        console.log(error.message)\n      })\n    },\n\n    mapClick(event) {\n      // this.resetCurrentMarker()\n\n      let type = this.types[this.toggle_exclusive]\n\n      // this.currentMarker.type = type\n      // this.currentMarker.coordinates = event.latlng\n      // this.markers.push(this.currentMarker)\n      let marker = {\n        coordinates: [event.latlng.lat, event.latlng.lng],\n        type: type,\n      }\n\n      this.markers.push(marker)\n      this.currentMarker = marker\n\n      this.showForm = true\n    },\n\n    saveObject() {\n      this.closeForm()\n\n      const info = {\n        \"typeId\": this.currentMarker.type.id,\n        \"coordinates\": this.currentMarker.coordinates,\n        \"title\": this.currentMarker.title,\n        \"description\": this.currentMarker.description,\n        \"creatorName\": this.currentMarker.creatorName,\n        \"creatorContact\": this.currentMarker.creatorContact,\n      }\n\n      const data = new FormData()\n      data.append(\"info\", this.convertToJsonFile(info))\n      data.append(\"image\", this.currentMarker.image)\n\n      this.$http.post('street-objects', data).then(response => {\n        const newMarker = this.markers.find(elem => !elem.id)\n        newMarker.id = response.data.id\n        newMarker.image = response.data.image\n        console.log(response.data.id)\n      }).catch(error => {\n        console.log(error.message)\n      })\n    },\n\n    convertToJsonFile(object) {\n      return new Blob([JSON.stringify(object)], {\n        type: 'application/json'\n      })\n    },\n\n    cancelCreation() {\n      this.closeForm()\n      this.removeCurrentMarker()\n    },\n\n    closeForm() {\n      this.$refs.observer.reset()\n      this.showForm = false\n    },\n\n    removeCurrentMarker() {\n      let markerIndex = this.markers.indexOf(this.currentMarker)\n      if (markerIndex !== -1) {\n        this.markers.splice(markerIndex, 1)\n      }\n    },\n\n    zoomUpdate(zoom) {\n      this.currentZoom = zoom\n    },\n    createIcon(tag, index) {\n      let name = (index === this.currentIndex) ? tag + \"_active\" : tag\n\n      return L.icon({\n        iconUrl: this.getIcon(name),\n        iconSize: [25, 25],\n        iconAnchor: [12, 25]\n      })\n    },\n    getIcon(icon) {\n      return require(`../assets/icons/${icon}.png`)\n    },\n    centerUpdate(center) {\n      console.log(center)\n      // this.currentCenter = center\n    },\n    markerClick(index) {\n      this.currentIndex = index\n      this.currentMarker = this.markers[index]\n      this.showCard = true\n    }\n  }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}